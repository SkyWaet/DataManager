openapi: 3.0.0
info:
  version: 1.0.1
  title: User Data Manager
  description: 'Just an example of CRUD API'
  contact:
    name: SkyWaet
    url: https://github.com/SkyWaet
    email: SkyWaet@gmail.com
components:
  schemas:
    simpleUser:
      type: object
      properties:
        login:
          type: string
          minLength: 6
          maxLength: 20
          description: login of the user
        password:
          type: string
          minLength: 8
          maxLength: 20
          format: password
          description: password of the user
        email:
          type: string
          format: email
          nullable: true
          description: user email
        description:
          type: string
          nullable: true
          maxLength: 1536
      required: 
        - login
        - password
        
    userWithId:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        login:
          type: string
          minLength: 6
          maxLength: 20
          description: login of the user
        password:
          type: string
          minLength: 8
          maxLength: 20
          format: password
          description: password of the user
        email:
          type: string
          format: email
          nullable: true
          description: user email
      required: 
        - login
        - password
        
    userWithDescription:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        login:
          type: string
          minLength: 6
          maxLength: 20
          description: login of the user
        password:
          type: string
          minLength: 8
          maxLength: 20
          format: password
          description: password of the user
        email:
          type: string
          format: email
          nullable: true
          description: user email
        desc:
          type: string
          nullable: true
          maxLength: 1536
          description: description of user
      required: 
        - login
        - password


                  
  examples:
    JohnReq:
      value:
        login: john
        password: john123
        email: john@gmail.com
        description: null
    MaryReq: 
      value:
        login: mary
        password: mary123
        email: null
        description: "Hello, I am Mary. I love coding!"
    JohnRes:
      value:
        id: 0
        login: john
        password: john123
        email: john@gmail.com
        description: null
    MaryRes: 
      value:
        id: 1
        login: mary
        password: mary123
        email: null
        description: "Hello, I am Mary. I love coding!"
        
  requestBodies:
    userBody:
      required: true
      description: A JSON object containing new user data
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/simpleUser'
            examples:
              john:
                $ref: '#/components/examples/JohnReq' 
              mary:
                $ref: '#/components/examples/MaryReq' 
        
paths: 
  /users:
    get:
      summary: Gets list of users
      parameters:
        - in: query
          name: orderBy
          schema:
              type: object
              properties:
                column:
                  type: string
                  default: 'id'
                ascendant: 
                  type: boolean
                  default: true
          description: allows to choose the ranking order 
        - in: query
          name: pageIndex
          schema:
            type: integer
            minimum: 0
            default: 0
          description: number of desired page
        - in: query
          name: numElements
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            description: amount of elements to return
          
      
      responses:
        '200':
          description: Gets an array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userWithId'
              example:
                - id: 0
                  login: John
                  password: john123
                  email: john@gmail.com
                - id: 1
                  login: Mary
                  password: mary456
                  email: null
    post:
        summary: Creates new user 
        requestBody:
          $ref: '#/components/requestBodies/userBody'
        
        responses:
          '200':
            description: Returns a copy of created user object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/userWithDescription'
                examples:
                  john:
                    $ref: '#/components/examples/JohnRes' 
                  mary:
                    $ref: '#/components/examples/MaryRes' 



                  
  /user/{userId}:
    parameters: 
        - in: path
          name: userId
          description: unique id of desired user 
          schema:
              type: integer
              format: int64
              minimum: 0
          required: true
    get: 
      summary: Gets a user by ID
    
      responses:
        '200':
          description: Gets the user with the corresponding id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userWithDescription'
              examples:
                john:
                  $ref: '#/components/examples/JohnRes' 
                mary:
                  $ref: '#/components/examples/MaryRes' 

        '404':
          description: User with requested id not found
    
    put:
      summary: Updates information about user
      requestBody:
        $ref: '#/components/requestBodies/userBody'
       
      responses:
        '200':
          description: Returns a copy of updated user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userWithDescription'
              examples:
                john:
                  $ref: '#/components/examples/JohnRes'
                mary:
                  $ref: '#/components/examples/MaryRes'
        '404':
          description: User with such id does not exist 
    delete:
      summary: Deletes the user with desired id if it exists
      responses:
        '204':
          description: User was found and deleted
        '404':
          description: User was not found
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SkyWaet/DataManager/1.0.0