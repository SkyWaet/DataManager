openapi: 3.0.0
info:
  version: 1.0.2
  title: User Data Manager
  description: 'Пример CRUD API'
  contact:
    name: SkyWaet
    url: https://github.com/SkyWaet
    email: SkyWaet@gmail.com
components:
  schemas:
    UsersListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserShortDTO'
        pageable:
          $ref: '../pageable/pageable.yml#/components/schemas/Pageable'
        total_pages:
          type: integer
        total_elements:
          type: integer
        last:
          type: boolean
        first:
          type: boolean
        size:
          type: integer
        number_of_elements:
          type: integer
        number:
          type: integer
        sort:
          $ref: '../pageable/pageable.yml#/components/schemas/Sort'
        empty:
          type: boolean

    UserShortDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        login:
          type: string
          minLength: 6
          maxLength: 20
          description: логин пользователя
        password:
          type: string
          minLength: 8
          maxLength: 20
          format: password
          description: пароль пользователя
        name:
          type: string
          maxLength: 50
          description: имя пользователя
        surname:
          type: string
          maxLength: 100
          description: фамилия пользователя
        patronymic:
          type: string
          maxLength: 100
          description: отчество пользователя
        email:
          type: string
          format: email
          nullable: true
          description: электронная почта пользователя
      required:
        - login
        - password

    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        login:
          type: string
          minLength: 6
          maxLength: 20
          description: логин пользователя
        password:
          type: string
          minLength: 8
          maxLength: 20
          format: password
          description: пароль пользователя
        name:
          type: string
          maxLength: 50
          description: имя пользователя
        surname:
          type: string
          maxLength: 100
          description: фамилия пользователя
        patronymic:
          type: string
          maxLength: 100
          description: отчество пользователя
        email:
          type: string
          format: email
          nullable: true
          description: электронная почта пользователя
        desc:
          type: string
          nullable: true
          maxLength: 1536
          description: описание пользователя
        vacations:
          type: array
          items:
            $ref: '#/components/schemas/VacationDTO'
          required: true
          description: список отпусков пользователя
      required:
        - login
        - password

    VacationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        from:
          type: string
          format: date
          description: дата начала отпуска
        to:
          type: string
          format: date
          description: дата окончания отпуска


  examples:
    JohnReq:
      value:
        id: null
        login: john
        password: john123
        name: John
        surname: Johnson
        patronymic: James
        email: john@gmail.com
        description: null
    MaryReq:
      value:
        id: null
        login: mary
        password: mary123
        name: Mary
        surname: Smith
        patronymic: James
        email: null
        description: "Hello, I am Mary. I love coding!"
    JohnRes:
      value:
        id: 0
        login: john
        password: john123
        name: John
        surname: Johnson
        patronymic: James
        email: john@gmail.com
        description: null
    MaryRes:
      value:
        id: 1
        login: mary
        password: mary123
        name: Mary
        surname: Smith
        patronymic: James
        email: null
        description: "Hello, I am Mary. I love coding!"

  requestBodies:
    userBody:
      required: true
      description: A JSON object containing new user data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDTO'
          examples:
            john:
              $ref: '#/components/examples/JohnReq'
            mary:
              $ref: '#/components/examples/MaryReq'

paths:
  /users:
    get:
      summary: Получение списка всех пользователей
      parameters:
        - in: query
          name: pageIndex
          schema:
            type: integer
            minimum: 0
            default: 0
          description: номер страницы
        - in: query
          name: numElements
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            description: желаемое количество записей


      responses:
        '200':
          description: Возвращает массив сокращенных пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
              example:
                - id: 0
                  login: John
                  password: john123
                  email: john@gmail.com
                - id: 1
                  login: Mary
                  password: mary456
                  email: null
    post:
      summary: Создание нового пользователя
      requestBody:
        $ref: '#/components/requestBodies/userBody'

      responses:
        '200':
          description: Возвращает копию созданного пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
              examples:
                john:
                  $ref: '#/components/examples/JohnRes'
                mary:
                  $ref: '#/components/examples/MaryRes'




  /user/{userId}:
    parameters:
      - in: path
        name: userId
        description: уникальный ID пользователя
        schema:
          type: integer
          format: int64
          minimum: 0
        required: true
    get:
      summary: Получение пользователя с заданным ID

      responses:
        '200':
          description: Возвращает пользователя с заданным ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
              examples:
                john:
                  $ref: '#/components/examples/JohnRes'
                mary:
                  $ref: '#/components/examples/MaryRes'

        '404':
          description: Пользователь с заданным ID не найден

    put:
      summary: Обновление информации о пользователе с заданным ID
      requestBody:
        $ref: '#/components/requestBodies/userBody'

      responses:
        '200':
          description: Возвращает копию обновленного пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
              examples:
                john:
                  $ref: '#/components/examples/JohnRes'
                mary:
                  $ref: '#/components/examples/MaryRes'
        '404':
          description: Пользователь с заданным ID не найден
    delete:
      summary: Удаление пользователя по ID
      responses:
        '204':
          description: Пользователь успешно удален
        '404':
          description: Пользователь с заданным ID не найден
servers:
  # Added by API Auto Mocking Plugin
  - description: Server for testing
    url: http://localhost/api/v1