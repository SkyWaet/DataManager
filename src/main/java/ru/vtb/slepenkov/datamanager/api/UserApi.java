/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.vtb.slepenkov.datamanager.api;

import ru.vtb.slepenkov.datamanager.model.SimpleUser;
import ru.vtb.slepenkov.datamanager.model.UserWithDescription;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-22T11:03:20.924Z[GMT]")
@Validated
public interface UserApi {

    @Operation(summary = "Deletes the user with desired id if it exists", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "User was found and deleted"),
        
        @ApiResponse(responseCode = "404", description = "User was not found") })
    @RequestMapping(value = "/user/{userId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> userUserIdDelete(@Min(0L)@Parameter(in = ParameterIn.PATH, description = "unique id of desired user", required=true, schema=@Schema(allowableValues={  }
)) @PathVariable("userId") Long userId);


    @Operation(summary = "Gets a user by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Gets the user with the corresponding id", content = @Content(schema = @Schema(implementation = UserWithDescription.class))),
        
        @ApiResponse(responseCode = "404", description = "User with requested id not found") })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserWithDescription> userUserIdGet(@Min(0L)@Parameter(in = ParameterIn.PATH, description = "unique id of desired user", required=true, schema=@Schema(allowableValues={  }
)) @PathVariable("userId") Long userId);


    @Operation(summary = "Updates information about user", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returns a copy of updated user object", content = @Content(schema = @Schema(implementation = UserWithDescription.class))),
        
        @ApiResponse(responseCode = "404", description = "User with such id does not exist") })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<UserWithDescription> userUserIdPut(@Min(0L)@Parameter(in = ParameterIn.PATH, description = "unique id of desired user", required=true, schema=@Schema(allowableValues={  }
)) @PathVariable("userId") Long userId, @Parameter(in = ParameterIn.DEFAULT, description = "A JSON object containing new user data", required=true, schema=@Schema()) @Valid @RequestBody SimpleUser body);

}

